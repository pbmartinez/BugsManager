@page "/bugs"
@using System.Net.Http.Json
@using Application.Dtos
@using Domain.Localization
@using Microsoft.Extensions.Localization
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject IDialogService Dialog
@inject IStringLocalizer<Resource> Localizer

<MudTable Items="@Elements" Dense="@dense" Hover="@hover" ReadOnly="@ronly" CanCancelEdit="@canCancelEdit" Filter="new Func<BugDto,bool>(FilterFunc)"
          @bind-SelectedItem="selectedItem1" SortLabel="Sort By" 
          >
    <ToolBarContent>
        <MudText Typo="Typo.h6">@Localizer[Resource.BugDtos]</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder=@Localizer[Resource.display_Search] Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudSpacer />
        <MudTooltip Text=@Localizer[Resource.btn_Add]>
            <MudIconButton @onclick="@Add" Icon="@Icons.Material.Filled.Add" Color=@MudBlazor.Color.Inherit ></MudIconButton>
        </MudTooltip>
    </ToolBarContent>
    <ColGroup>
        <col style="width:10%;" />
        <col style="width:20%;" />
        <col style="width:50%;" />
        <col style="width:20%;" />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<BugDto, object>(x=>x.Id)">Id</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<BugDto, object>(x=>x.UserId)">@Localizer[Resource.BugDtoUserId]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<BugDto, object>(x=>x.ProjectId)">@Localizer[Resource.BugDtoProjectId]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<BugDto, object>(x=>x.Description)">@Localizer[Resource.BugDtoDescription]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<BugDto, object>(x=>x.CreationDate)">@Localizer[Resource.BugDtoCreationDate]</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.Id</MudTd>
        <MudTd>@context.UserFullName</MudTd>
        <MudTd>@context.ProjectName</MudTd>
        <MudTd>@context.Description</MudTd>
        <MudTd>@context.CreationDate</MudTd>
        <MudTd DataLabel="">
            <MudTooltip Text=@Localizer[Resource.btn_Details]>
                <MudFab @onclick="@(()=>Show(context))" Color=@MudBlazor.Color.Default Icon="@Icons.Material.Filled.Visibility" Size=Size.Small> </MudFab>
            </MudTooltip>
            <MudTooltip Text=@Localizer[Resource.btn_Edit]>
                <MudFab @onclick="@(()=>Edit(context))" Color=@MudBlazor.Color.Warning Icon="@Icons.Material.Filled.Edit" Size=Size.Small> </MudFab>
            </MudTooltip>
            <MudTooltip Text=@Localizer[Resource.btn_Delete]>
                <MudFab @onclick="@(()=>Delete(context))" Color=@MudBlazor.Color.Error Icon="@Icons.Material.Filled.Delete" Size=Size.Small> </MudFab>
            </MudTooltip>
        </MudTd>
    </RowTemplate>    
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>



@code {
    private List<string> editEvents = new();
    private bool dense = true;
    private bool hover = true;
    private bool ronly = true;
    private bool canCancelEdit = true;
    private string searchString = "";
    private BugDto selectedItem1 = null!;
    private HashSet<BugDto> selectedItems1 = new HashSet<BugDto>();
    private IDialogReference? dialogReference;
    private DialogOptions dialogOptions = new DialogOptions { CloseButton = true };

    private IEnumerable<BugDto> Elements = new List<BugDto>();

    protected override async Task OnInitializedAsync()
    {
        await UpdateGridAsync();
        if (Elements == null || !Elements.Any())
            Snackbar.Add(Localizer[Resource.message_NoItemsFound], Severity.Info);
    }

    private async Task Show(BugDto pivot)
    {
        var item = await httpClient.GetFromJsonAsync<BugDto>($"/bug/{pivot.Id}");
        if (item == null)
        {
            Snackbar.Add(Localizer[Resource.message_ItemDoesNotExist], Severity.Warning);
            await UpdateGridAsync();
        }
        else
        {
            var parameters = SetParametersForShow();
            parameters.Add("item", item);
            parameters.Add("ShowMode", true);
            dialogReference = Dialog.Show<ShowBug>("", parameters, dialogOptions);
        }
    }
    private void Add()
    {
        var parameters = SetParametersForShow();
        parameters.Add("item", new BugDto());
        parameters.Add("AddMode", true);
        dialogReference = Dialog.Show<ShowBug>("", parameters, dialogOptions);

    }
    private async Task Edit(BugDto pivot)
    {
        var item = await httpClient.GetFromJsonAsync<BugDto>($"/bug/{pivot.Id}");
        if (item == null)
        {
            Snackbar.Add(Localizer[Resource.message_ItemDoesNotExist], Severity.Warning);
            await UpdateGridAsync();
        }
        else
        {
            var parameters = SetParametersForShow();
            parameters.Add("item", item);
            parameters.Add("EditMode", true);
            dialogReference = Dialog.Show<ShowBug>("", parameters, dialogOptions);
        }
    }
    private async Task Delete(BugDto pivot)
    {
        var item = await httpClient.GetFromJsonAsync<BugDto>($"/bug/{pivot.Id}");
        if (item == null)
        {
            Snackbar.Add(Localizer[Resource.message_ItemDoesNotExist], Severity.Warning);
            await UpdateGridAsync();
        }
        else
        {
            var parameters = SetParametersForShow();
            parameters.Add("item", item);
            parameters.Add("DeleteMode", true);
            dialogReference = Dialog.Show<ShowBug>("", parameters, dialogOptions);
        }
    }
    private DialogParameters SetParametersForShow()
    {
        var parameters = new DialogParameters();
        parameters.Add("OnSuccessfullySaveAsync",async () => await OnSuccessfullySaveAsync());
        parameters.Add("OnSuccessfullyDeletedAsync",async () => await OnSuccessfullyDeletedAsync());
        parameters.Add("OnCancelled", () => OnCancelled());
        return parameters;
    }

    private async Task UpdateGridAsync()
    {
        Elements = (await httpClient.GetFromJsonAsync<List<BugDto>>("/bug?Includes=User,Project")) ?? new List<BugDto>();        
    }

    private void OnCancelled()
    {
        dialogReference?.Close();
    }

    private async Task OnSuccessfullySaveAsync()
    {
        dialogReference?.Close();
        await UpdateGridAsync();
        StateHasChanged();
    }
    private async Task OnSuccessfullyDeletedAsync()
    {
        dialogReference?.Close();
        await UpdateGridAsync();
        StateHasChanged();
    }

    private bool FilterFunc(BugDto element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.UserId.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.ProjectId.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (element.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.CreationDate.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        if ($"{element.Id} {element.UserId} {element.ProjectId} {element.Description} {element.CreationDate.ToString()}".Contains(searchString))
            return true;
        return false;
    }
}