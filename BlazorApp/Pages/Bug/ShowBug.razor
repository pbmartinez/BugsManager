@using Application.Dtos
@using BlazorApp.Services
@using Domain.Localization
@using Microsoft.Extensions.Localization
@using System.Net

@inject ISnackbar Snackbar
@inject IStringLocalizer<Resource> Localizer
@inject HttpClient Http
@inject HttpClientInterceptorService Interceptor

<MudCard Elevation="2">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">@CardHeader</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudForm @bind-IsValid="@success" @bind-Errors="@errors">
            <MudGrid>
                <MudItem xs="12" sm="12">                    
                    <MudSelect T="int" @bind-Value="@(item.UserId)" Disabled=@(disabled) Label=@Localizer[Resource.BugDtoUserId] OpenIcon="@Icons.Material.Filled.VerifiedUser" AdornmentColor="MudBlazor.Color.Primary" 
                                Margin="Margin.Normal" Placeholder=@Localizer[Resource.BugDtoUserId]  Immediate="true" Strict="true"    
                                Required="true" RequiredError="@Localizer[Resource.validation_FieldRequired]" 
                                Validation="@(new Func<int, IEnumerable<string>>(CheckUserId))"
                                SelectedValues="@selectedUser">
                        @foreach (var item in Users)
                        {
                            <MudSelectItem T="int" Value="@item.Id" >@($"{item.Name} {item.SurName}")</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="12">                    
                    <MudSelect T="int" @bind-Value="@(item.ProjectId)" Disabled=@(disabled) Label=@Localizer[Resource.BugDtoProjectId] OpenIcon="@Icons.Material.Filled.Plumbing" AdornmentColor="MudBlazor.Color.Primary" 
                                Margin="Margin.Normal" Placeholder=@Localizer[Resource.BugDtoProjectId]  Immediate="true" Strict="true"          
                                Required="true" RequiredError="@Localizer[Resource.validation_FieldRequired]" 
                                Validation="@(new Func<int, IEnumerable<string>>(CheckProjectId))"
                                SelectedValues="@selectedProject">
                        @foreach (var item in Projects)
                        {
                            <MudSelectItem T="int"  Value="@item.Id">@(item.Name)</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="12">
                    <MudTextField @bind-Value=item.Description Disabled=@(disabled) Label=@Localizer[Resource.BugDtoDescription] Margin="Margin.Normal" Placeholder=@Localizer[Resource.BugDtoDescription]
                                  Lines="4" MaxLength="100"
                                  Required="true" RequiredError="@Localizer[Resource.validation_FieldRequired]">
                    </MudTextField>
                </MudItem>

            </MudGrid>
            <br />


            @if (ShowMode)
            {
                <MudButton OnClick="Cancel" Variant="Variant.Filled" Color="MudBlazor.Color.Default">@Localizer[Resource.btn_Cancel]</MudButton>
                <MudButton OnClick="ChangeToEditMode" Variant="Variant.Filled" Color="MudBlazor.Color.Warning">@Localizer[Resource.btn_Edit]</MudButton>
                <MudButton OnClick="ChangeToDeleteMode" Variant="Variant.Filled" Color="MudBlazor.Color.Error">@Localizer[Resource.btn_Delete]</MudButton>
            }
            @if (AddMode)
            {
                <MudButton OnClick="Cancel" Variant="Variant.Filled" Color="MudBlazor.Color.Default">@Localizer[Resource.btn_Cancel]</MudButton>
                <MudButton OnClick="AddAsync" Variant="Variant.Filled" Color="MudBlazor.Color.Success" Disabled="@(!success)">@Localizer[Resource.btn_Save]</MudButton>
            }
            @if (EditMode)
            {
                <MudButton OnClick="Cancel" Variant="Variant.Filled" Color="MudBlazor.Color.Default">@Localizer[Resource.btn_Cancel]</MudButton>
                <MudButton OnClick="ChangeToShowMode" Variant="Variant.Filled" Color="MudBlazor.Color.Info">@Localizer[Resource.btn_Details]</MudButton>
                <MudButton OnClick="EditAsync" Variant="Variant.Filled" Color="MudBlazor.Color.Success" Disabled="@(!success)">@Localizer[Resource.btn_Save]</MudButton>
                <MudButton OnClick="ChangeToDeleteMode" Variant="Variant.Filled" Color="MudBlazor.Color.Error">@Localizer[Resource.btn_Delete]</MudButton>
            }
            @if (DeleteMode)
            {
                <MudButton OnClick="Cancel" Variant="Variant.Filled" Color="MudBlazor.Color.Default">@Localizer[Resource.btn_Cancel]</MudButton>
                <MudButton OnClick="ChangeToShowMode" Variant="Variant.Filled" Color="MudBlazor.Color.Info">@Localizer[Resource.btn_Details]</MudButton>
                <MudButton OnClick="ChangeToEditMode" Variant="Variant.Filled" Color="MudBlazor.Color.Warning">@Localizer[Resource.btn_Edit]</MudButton>
                <MudButton OnClick="DeleteAsync" Variant="Variant.Filled" Color="MudBlazor.Color.Error">@Localizer[Resource.btn_Delete]</MudButton>
            }
        </MudForm>
    </MudCardContent>
</MudCard>

@code {
    string[] errors = { };
    List<int> selectedUser = new List<int>();
    List<int> selectedProject = new List<int>();
    public List<UserDto> Users = new List<UserDto>();
    public List<ProjectDto> Projects = new List<ProjectDto>();

    [Parameter]
    public BugDto item { get; set; } = new BugDto();

    [Parameter]
    public Func<Task> OnSuccessfullySaveAsync { get; set; } = () => Task.CompletedTask;

    [Parameter]
    public Func<Task> OnSuccessfullyDeletedAsync { get; set; } = () => Task.CompletedTask;

    [Parameter]
    public Action OnCancelled { get; set; } = () => { };

    [Parameter]
    public bool EditMode { get; set; }

    [Parameter]
    public bool DeleteMode { get; set; }

    [Parameter]
    public bool ShowMode { get; set; }

    [Parameter]
    public bool AddMode { get; set; }

    private bool success = false;

    private bool disabled => ShowMode || DeleteMode;

    private string CardHeader = string.Empty;

    private void UpdateCardHeader()
    {
        if (EditMode)
            CardHeader = Localizer[Resource.display_AddEdit];
        else if (DeleteMode)
            CardHeader = Localizer[Resource.display_ConfirmOnDelete];
        else
            CardHeader = Localizer[Resource.btn_Details];
    }

    protected override void OnParametersSet()
    {
        var justOneFlag = ShowMode ^ DeleteMode ^ EditMode ^ AddMode;
        if (!justOneFlag)
            throw new ArgumentException(Localizer[Resource.Exception_MultipleModeOnShowView]);
    }
    public void Dispose() => Interceptor.DisposeEvent();
    protected override async Task OnInitializedAsync()
    {
        await UpdateDependenciesAsync();
        Interceptor.RegisterEvent();
        UpdateCardHeader();
    }
    private async Task UpdateDependenciesAsync()
    {
        Users = (await Http.GetFromJsonAsync<List<UserDto>>("/user/available")) ?? new List<UserDto>();
        Projects = (await Http.GetFromJsonAsync<List<ProjectDto>>("/project")) ?? new List<ProjectDto>();
        if (Users.Count > 0)
            selectedUser = new List<int> { Users.First().Id };
        if (Projects.Count > 0)
            selectedProject = new List<int> { Projects.First().Id };
    }

    private void Cancel()
    {
        OnCancelled.Invoke();
    }

    private async Task DeleteAsync()
    {
        if (item == null || item.Id == 0)
        {
            Snackbar.Add(Localizer[Resource.message_ItemDoesNotExist], Severity.Warning);
        }
        else
        {
            var itemToDelete = await Http.GetFromJsonAsync<BugDto>($"/bug/{item.Id}");

            if (itemToDelete == null)
            {
                Snackbar.Add(Localizer[Resource.message_ItemDoesNotExist], Severity.Warning);
            }
            else
            {
                var result = await Http.DeleteAsync($"/bug/{item.Id}");
                if (result.StatusCode == HttpStatusCode.NoContent)
                {
                    Snackbar.Add(Localizer[Resource.message_SuccesfullyDeleted], Severity.Success);
                    await OnSuccessfullyDeletedAsync.Invoke();
                }
            }
        }
    }
    private async Task EditAsync()
    {
        var itemToEdit = await Http.GetFromJsonAsync<BugDto>($"/bug/{item.Id}");

        if (itemToEdit == null)
        {
            Snackbar.Add(Localizer[Resource.message_ItemDoesNotExist], Severity.Warning);
        }
        else
        {
            var result = await Http.PutAsJsonAsync<BugDto>($"/bug/{item.Id}", item);
            if (result.StatusCode == HttpStatusCode.NoContent)
            {
                Snackbar.Add(Localizer[Resource.message_SuccesfullyEdited], Severity.Success);
                await OnSuccessfullySaveAsync.Invoke();
            }
        }
    }
    private async Task AddAsync()
    {
        var result = await Http.PostAsJsonAsync<BugDto>($"/bug", item);
        if (result.StatusCode == HttpStatusCode.Created || result.StatusCode == HttpStatusCode.OK)
        {
            Snackbar.Add(Localizer[Resource.message_SuccesfullyAdded], Severity.Success);
            await OnSuccessfullySaveAsync.Invoke();
        }
        var response = result.Content.ReadAsStringAsync();
    }


    private void ChangeToEditMode()
    {
        EditMode = true;
        DeleteMode = false;
        ShowMode = false;
        AddMode = false;
        UpdateCardHeader();
    }
    private void ChangeToDeleteMode()
    {
        EditMode = false;
        DeleteMode = true;
        ShowMode = false;
        AddMode = false;
        UpdateCardHeader();
    }
    private void ChangeToShowMode()
    {
        EditMode = false;
        DeleteMode = false;
        ShowMode = true;
        AddMode = false;
        UpdateCardHeader();
    }
    private void ChangeToAddMode()
    {
        EditMode = false;
        DeleteMode = false;
        ShowMode = false;
        AddMode = true;
        UpdateCardHeader();
    }

    private List<string> CheckUserId(int userId)
    {
        var errors = new List<string>();
        if (userId <= 0)
            errors.Add(Localizer[Resource.validation_FieldRequired]);
        return errors;
    }
    private List<string> CheckProjectId(int projectId)
    {
        var errors = new List<string>();
        if (projectId <= 0)
            errors.Add(Localizer[Resource.validation_FieldRequired]);
        return errors;    
    }
}
