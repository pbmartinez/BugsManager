@page "/users"
@using System.Net.Http.Json
@using Application.Dtos
@using Domain.Localization
@using Microsoft.Extensions.Localization

@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject IDialogService Dialog
@inject IStringLocalizer<Resource> Localizer

<MudTable Items="@Elements" Dense="@dense" Hover="@hover" ReadOnly="@ronly" CanCancelEdit="@canCancelEdit" Filter="new Func<UserDto,bool>(FilterFunc)"
          @bind-SelectedItem="selectedItem1" >
    <ToolBarContent>
        <MudText Typo="Typo.h6">@Localizer[Resource.UserDtos]</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder=@Localizer[Resource.display_Search] Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudSpacer />
        <MudTooltip Text=@Localizer[Resource.btn_Add] >
            <MudIconButton @onclick="@Add" Icon="@Icons.Material.Filled.Add" Color="@MudBlazor.Color.Inherit" ></MudIconButton>
        </MudTooltip>
    </ToolBarContent>
@*    <ColGroup>
        <col style="width:10%;" />
        <col style="width:20%;" />
        <col style="width:50%;" />
        <col style="width:20%;" />
    </ColGroup>*@
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<UserDto, object>(x=>x.Id)">Id</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<UserDto, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<UserDto, object>(x=>x.SurName)">SurName</MudTableSortLabel></MudTh>
        <MudTh>@Localizer[Resource.display_Actions]</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd>@context.Name</MudTd>
        <MudTd>@context.SurName</MudTd>
        <MudTd DataLabel="">
            <MudTooltip Text=@Localizer[Resource.btn_Details]>
                <MudFab @onclick="@(()=>Show(context))" Color="@MudBlazor.Color.Default" Icon="@Icons.Material.Filled.Visibility" Size=Size.Small> </MudFab>
            </MudTooltip>
            <MudTooltip Text=@Localizer[Resource.btn_Edit]>
                <MudFab @onclick="@(()=>Edit(context))" Color=@MudBlazor.Color.Warning Icon="@Icons.Material.Filled.Edit" Size=Size.Small> </MudFab>
            </MudTooltip>
            <MudTooltip Text=@Localizer[Resource.btn_Delete]>
                <MudFab @onclick="@(()=>Delete(context))" Color=@MudBlazor.Color.Error Icon="@Icons.Material.Filled.Delete" Size=Size.Small> </MudFab>
            </MudTooltip>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>



@code {
    private List<string> editEvents = new();
    private bool dense = true;
    private bool hover = true;
    private bool ronly = true;
    private bool canCancelEdit = true;
    private string searchString = "";
    private UserDto selectedItem1 = null!;
    private HashSet<UserDto> selectedItems1 = new HashSet<UserDto>();
    private IDialogReference? dialogReference;
    private DialogOptions dialogOptions = new DialogOptions { CloseButton = true };

    private IEnumerable<UserDto> Elements = new List<UserDto>();

    protected override async Task OnInitializedAsync()
    {
        await UpdateGridAsync();
        if (Elements == null || !Elements.Any())
            Snackbar.Add(@Localizer[Resource.message_NoItemsFound], Severity.Info);
    }

    private async Task Show(UserDto pivot)
    {
        var item = await httpClient.GetFromJsonAsync<UserDto>($"/user/{pivot.Id}");
        if (item == null)
        {
            Snackbar.Add(Localizer[Resource.message_ItemDoesNotExist], Severity.Warning);
            await UpdateGridAsync();
        }
        else
        {
            var parameters = SetParametersForShow();
            parameters.Add("item", item);
            parameters.Add("ShowMode", true);
            dialogReference = Dialog.Show<ShowUser>("", parameters, dialogOptions);
        }
    }
    private void Add()
    {
        var parameters = SetParametersForShow();
        parameters.Add("item", new UserDto());
        parameters.Add("AddMode", true);
        dialogReference = Dialog.Show<ShowUser>("", parameters, dialogOptions);

    }
    private async Task Edit(UserDto pivot)
    {
        var item = await httpClient.GetFromJsonAsync<UserDto>($"/user/{pivot.Id}");
        if (item == null)
        {
            Snackbar.Add(Localizer[Resource.message_ItemDoesNotExist], Severity.Warning);
            await UpdateGridAsync();
        }
        else
        {
            var parameters = SetParametersForShow();
            parameters.Add("item", item);
            parameters.Add("EditMode", true);
            dialogReference = Dialog.Show<ShowUser>("", parameters, dialogOptions);
        }
    }
    private async Task Delete(UserDto pivot)
    {
        var item = await httpClient.GetFromJsonAsync<UserDto>($"/user/{pivot.Id}");
        if (item == null)
        {
            Snackbar.Add(Localizer[Resource.message_ItemDoesNotExist], Severity.Warning);
            await UpdateGridAsync();
        }
        else
        {
            var parameters = SetParametersForShow();
            parameters.Add("item", item);
            parameters.Add("DeleteMode", true);
            dialogReference = Dialog.Show<ShowUser>("", parameters, dialogOptions);
        }
    }
    private DialogParameters SetParametersForShow()
    {
        var parameters = new DialogParameters();
        parameters.Add("OnSuccessfullySaveAsync",async () => await OnSuccessfullySaveAsync());
        parameters.Add("OnSuccessfullyDeletedAsync",async () => await OnSuccessfullyDeletedAsync());
        parameters.Add("OnCancelled", () => OnCancelled());
        return parameters;
    }

    private async Task UpdateGridAsync()
    {
        Elements = (await httpClient.GetFromJsonAsync<List<UserDto>>("/user")) ?? new List<UserDto>();        
    }

    private void OnCancelled()
    {
        dialogReference?.Close();
    }

    private async Task OnSuccessfullySaveAsync()
    {
        dialogReference?.Close();
        await UpdateGridAsync();
        StateHasChanged();
    }
    private async Task OnSuccessfullyDeletedAsync()
    {
        dialogReference?.Close();
        await UpdateGridAsync();
        StateHasChanged();
    }

    private bool FilterFunc(UserDto element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.SurName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Id} {element.Name} {element.SurName}".Contains(searchString))
            return true;
        return false;
    }
}